(do
 (define! load
   (lambda filename
     (do
       (define! read-port (open-input-file filename))
       (define! content (read-from read-port))
       (eval (read content)))))
 (define! >>=
   (macro parameters
   (macro body
     (if (= parameters "")
       body
       `(macro ,(car parameters)
          (>>= ,(cdr parameters) ,body))))))
 (define! >-
   (>>= (parameters body)
     (if (= parameters "")
       body
       `(lambda ,(car parameters)
          (>- ,(cdr parameters) ,body)))))
 (define! print
   (lambda value
     (write-to +stdout+ value)))
 (define! let
   (>>= (parameter argument body)
     `((lambda ,parameter ,body) ,argument)))
 ;; (define! and
 ;;   (macro first
 ;;   (macro second
 ;;     `(if ,first
 ;;        ,second
 ;;        ""))))
 (define! and
   (lambda first
     (if first
       (macro second second)
       (macro ignore '""))))
 (define! cons-pair
   (>- (car cdr)
     (cons car (cons cdr ""))))
 (define! car-pair car)
 (define! cdr-pair
   (lambda pair (car (cdr pair))))
 (define! map
   (lambda function
   (lambda list
     (if (= list "")
       ""
       (cons (function (car list)) (map function (cdr list)))))))
 (define! reduce
   (lambda function
   (lambda list
   (lambda initialize
     (if (= list "")
       initialize
       (reduce function (cdr list) (function initialize (car list))))))))
 (define! concat
   (lambda lista
   (lambda listb
     (if (= lista "")
       listb
       (cons (car lista) (concat (cdr lista) listb))))))
 ;; (define! >-
 ;;   (macro parameters
 ;;   (macro body
 ;;    (if (= parameters "")
 ;;      body
 ;;      `(lambda ,(car parameters)
 ;;         (>- ,(cdr parameters) ,body))))))
)
